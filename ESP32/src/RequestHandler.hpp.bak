#ifndef REQUESTHANDLER_HPP
#define REQUESTHANDLER_HPP
#include <string>
#include <map>
#include "DataFrame.hpp"
#include <Arduino.h>
#include <vector>

class RequestHandler {
public:
    explicit RequestHandler(Stream& outSerial, Stream& sniffSerial);

    template <class TCommand>
    typename TCommand::Type get(const int responseExpected = 0);

    void loadAvailableDataCommands();

    void printAvailableCommands() const;

    void printAvailableForDataFrame() const;

    DataFrame getDataFrame();

    std::vector<uint8_t> request(const uint8_t command[], const int responseExpected = 0);

    bool sniff();

private:
    // std::size_t availableData();
    // std::string readAllAvailableData();


    [[nodiscard]] bool isCommandAvailable(const uint8_t command[]) const;

    // boost::asio::io_service io;
    Stream& _outSerial;
    Stream& _sniffSerial;
    // boost::asio::streambuf inputBuffer;
    uint8_t buffer[512];
    std::map<const uint8_t*, bool> _availableCommands;

};
#define REQUESTHANDLER_HPP

#endif //REQUESTHANDLER_HPP
