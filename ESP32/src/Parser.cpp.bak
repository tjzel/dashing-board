#include "Parser.hpp"
#include "Requests.hpp"

std::string Parser::headerPrefix = "41";

int Parser::getByte(std::vector<uint8_t> data, const int pos) {
  // const size_t startIndex = pos * 2;
  // if (startIndex + 2 > data.size()) {
  //   return -1;
  // }
  // const auto byte = std::stoi(data.substr(startIndex, 2), nullptr, 16);
  return data[pos];
  // return byte;
}

std::vector<uint8_t> Parser::getData(std::vector<uint8_t> response, const uint8_t* command) {

  return response;
}

void Parser::parseIgnore([[maybe_unused]] std::vector<uint8_t> data) { }

std::vector<int> Parser::parseAvailability(std::vector<uint8_t> response, const uint8_t* command) {
  const auto data = getData(response, command);
  std::vector<int> result;
  for (auto character : data) {
    // const auto value = std::stoi(std::string(1, character), nullptr, 16);
    result.push_back(character);
  }
  return result;
}

double Parser::parsePercentageSingleByte(std::vector<uint8_t> data) {
  const auto A = getByte(data, 0);
  return A / 2.55;
}

double Parser::parsePercentageDoubleByte(std::vector<uint8_t> data) {
  const auto A = getByte(data, 0);
  const auto B = getByte(data, 1);
  return ((A * 256) + B) / 2.55;
}

int Parser::parseIdentitySingleByte(std::vector<uint8_t> data) {
  const auto A = getByte(data, 0);
  return A;
}

int Parser::parseIdentityDoubleByte(std::vector<uint8_t> data) {
  const auto A = getByte(data, 0);
  const auto B = getByte(data, 1);
  return ((A * 256) + B);
}

int Parser::parseRPM(std::vector<uint8_t> data) {
  const auto A = getByte(data, 0);
  const auto B = getByte(data, 1);
  int rpm = ((A * 256) + B) / 4;
  return rpm;
}

int Parser::parseEngineFuelRate(std::vector<uint8_t> data) {
  const auto A = getByte(data, 0);
  const auto B = getByte(data, 1);
  int engineFuelRate = ((A * 256) + B) / 20;
  return engineFuelRate;
}